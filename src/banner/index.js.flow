/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
// @flow

import * as React from 'react';
import type { StyletronComponent } from '../styles/styled';
import type { OverrideT } from '../helpers/overrides';

declare export var ACTION_POSITION: {
  below: 'below',
  trailing: 'trailing',
};

declare export var ARTWORK_TYPE: {
  icon: 'icon',
  badge: 'badge',
};

declare export var HIERARCHY: {
  low: 'low',
  high: 'high',
};

declare export var KIND: {
  info: 'info',
  negative: 'negative',
  positive: 'positive',
  warning: 'warning',
};

export type ActionPositionT = $Values<typeof ACTION_POSITION>;
export type ArtworkTypeT = $Values<typeof ARTWORK_TYPE>;
export type HierarchyT = $Values<typeof HIERARCHY>;
export type KindT = $Values<typeof KIND>;

export type ActionContentT = {|
  // Text shown within action button or applied to aria label.
  label: string,
  // If provided renders this icon instead of the text label.
  icon?: ({ size: string }) => React.Node,
  // Called when action button is activated.
  onClick: (SyntheticEvent<HTMLButtonElement>) => mixed,
  // Determines if action button is positioned trailing message or below.
  position?: ActionPositionT,
|};

export type ArtworkContentT = {|
  // Element displayed, usually an icon.
  icon: ({ size: string }) => React.Node,
  // Determines artwork size. Icon for graphics with a strong silhouette or badge for more nuance.
  type?: ArtworkTypeT,
|};

export type PropsT = {|
  // Provide a method to "accept", "dismiss", or otherwise interact with the message shown.
  action?: ActionContentT,
  // Visually convey the message text.
  artwork?: ArtworkContentT,
  // Message to display.
  children: React.Node,
  // Determines message priority by rendering in pale or saturated colors.
  hierarchy?: HierarchyT,
  // Determines color scheme and conveys message intent.
  kind?: KindT,
  overrides?: {|
    BelowContent?: OverrideT,
    LeadingContent?: OverrideT,
    Message?: OverrideT,
    MessageContent?: OverrideT,
    Root?: OverrideT,
    Title?: OverrideT,
    TrailingContent?: OverrideT,
    TrailingButtonContainer?: OverrideT,
    TrailingIconButton?: OverrideT,
  |},
  // Used to make the banner visually distinct from its container element.
  nested?: boolean,
  // Bold text displayed when message content should be separated to two lines.
  title?: React.Node,
|};

declare export var Banner: React.ComponentType<PropsT>;

declare export var StyledRoot: StyletronComponent<{
  $backgroundColor: string,
  $color: string,
  $nested: boolean,
}>;
declare export var StyledLeadingContent: StyletronComponent<{ $includesArtwork: boolean }>;
declare export var StyledMessageContent: StyletronComponent<{ $actionPosition: ActionPositionT }>;
declare export var StyledTrailingContent: StyletronComponent<{}>;
declare export var StyledBelowContent: StyletronComponent<{ $actionPosition: ActionPositionT }>;
declare export var StyledTitle: StyletronComponent<{}>;
declare export var StyledMessage: StyletronComponent<{}>;
declare export var StyledTrailingButtonContainer: StyletronComponent<{}>;
declare export var StyledTrailingIconButton: StyletronComponent<{ $nested: boolean }>;
