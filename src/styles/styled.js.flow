/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
// @flow
import * as React from 'react';
import type { StyleObject } from 'styletron-standard';
import type { ThemeT } from './';

/* eslint-disable flowtype/generic-spacing */
/* flowlint unclear-type:off */
export type StyletronComponent<Props> = React.StatelessFunctionalComponent<Props> & {
  __STYLETRON__: any,
};

type StyleFn<Theme> = {
  (string): StyletronComponent<{}>,

  (string, StyleObject): StyletronComponent<{}>,

  <Props>(string, ({ $theme: Theme } & Props) => StyleObject): StyletronComponent<Props>,

  <Base: React.ComponentType<any>>(
    Base,
    StyleObject
  ): StyletronComponent<$Diff<React.ElementConfig<Base>, { className: any }>>,

  <Base: React.ComponentType<any>, Props>(
    Base,
    ({ $theme: Theme } & Props) => StyleObject
  ): StyletronComponent<$Diff<React.ElementConfig<Base>, { className: any }> & Props>,
};

type ExtractPropTypes = <T>(StyletronComponent<T>) => T;
type WithStyleFn<Theme> = {
  <Base: StyletronComponent<any>, Props>(
    Base,
    (Props & { $theme: Theme }) => StyleObject
  ): StyletronComponent<$Call<ExtractPropTypes, Base> & Props>,

  <Base: StyletronComponent<any>>(
    Base,
    StyleObject
  ): StyletronComponent<$Call<ExtractPropTypes, Base>>,
};
/* eslint-enable flowtype/generic-spacing */
/* flowlint unclear-type:error */

declare export function createThemedStyled<Theme>(): StyleFn<Theme>;
declare export var styled: StyleFn<ThemeT>;
declare export function createThemedWithStyle<Theme>(): WithStyleFn<Theme>;
declare export var withStyle: WithStyleFn<ThemeT>;

type UseStyletronFn<Theme> = () => [(StyleObject) => string, Theme];

declare export function createThemedUseStyletron<Theme>(): UseStyletronFn<Theme>;

declare export var useStyletron: UseStyletronFn<ThemeT>;

declare export function withWrapper(
  StyledElement: StyletronComponent<$FlowFixMe>,
  wrapperFn: (StyletronComponent<$FlowFixMe>) => ($FlowFixMe) => $FlowFixMe
): StyletronComponent<$FlowFixMe>;
