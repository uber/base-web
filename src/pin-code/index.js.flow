/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
// @flow

import * as React from 'react';

import type { OverrideT } from '../helpers/overrides';
import { SIZE, STATE_CHANGE_TYPE } from '../input';

export { SIZE } from '../input';
type ChangeEventT = { values: string[], event: InputEvent };

type PropsT = {
  /** Sets aria-label attribute for each input element. */
  'aria-label': ?string,
  /** Sets aria-labelledby attribute for each input element. */
  'aria-labelledby': ?string,
  /** Sets aria-describedby attribute for each input element. */
  'aria-describedby': ?string,
  /** Sets autocomplete attribute for each input element. */
  autoComplete: ?string,
  /** If true, the first input will be focused upon mounting. */
  autoFocus: boolean,
  /** Render the component in a disabled state. */
  disabled: boolean,
  /** Renders the component in an error state. */
  error: boolean,
  /** Sets the base id string that will be applied to the id attribute of each input element. The index of the input will be appended to this base string. Ex: `id="foo"` -> `id="foo-1"`, `id="foo-2",` etc... */
  id: ?string,
  /** Sets the name attribute of each input element. */
  name: ?string,
  /** A handler for when any pin code input changes value. */
  onChange: (ChangeEventT) => mixed,
  overrides: {
    Root?: OverrideT,
    Input?: OverrideT,
  },
  /** Sets the placeholder text for each pin code input element. */
  placeholder: string,
  /** Renders the component in a positive state. */
  positive: boolean,
  /** Sets the required attribute of each pin code input element. */
  required: boolean,
  /** Renders the component at a given size. */
  size: $Keys<typeof SIZE>,
  /** If true, when a pin code input receives a valid value, focus will be transferred to the next pin code input (until the end of the inputs). */
  manageFocus: boolean,
  /** An array of values respective to each pin code input. */
  values: string[],
  /** Mask for pin code. Default is no mask. Set it true then mask is ".". Also accept string input as customized mask style. */
  mask: boolean | string,
};

// Stateful stuff below

type StateT = {
  hasFocus: boolean,
};

type StatefulPinCodeContainerStateT = {
  values: string[],
};

type StateChangeT = $Keys<typeof STATE_CHANGE_TYPE>;

type StateReducerT = (
  type: StateChangeT,
  nextState: StatefulPinCodeContainerStateT,
  currentState: StatefulPinCodeContainerStateT
) => StatefulPinCodeContainerStateT;

type StatefulPinCodePropsT = PropsT & {
  initialState?: StatefulPinCodeContainerStateT,
  onChange?: (event: ChangeEventT) => mixed,
  stateReducer?: StateReducerT,
};

type StatefulPinCodeContainerPropsT = PropsT & {
  children: (PropsT) => React.Node,
  initialState: StatefulPinCodeContainerStateT,
  onChange: (event: ChangeEventT) => mixed,
  stateReducer: StateReducerT,
};

type PinCodeDefaultProps = {
  'aria-label': $FlowFixMe,
  'aria-labelledby': $FlowFixMe,
  'aria-describedby': $FlowFixMe,
  autoComplete: $FlowFixMe,
  autoFocus: $FlowFixMe,
  disabled: $FlowFixMe,
  error: $FlowFixMe,
  id: $FlowFixMe,
  name: $FlowFixMe,
  onChange: $FlowFixMe,
  overrides: $FlowFixMe,
  placeholder: $FlowFixMe,
  positive: $FlowFixMe,
  required: $FlowFixMe,
  size: $FlowFixMe,
  manageFocus: $FlowFixMe,
  values: $FlowFixMe,
  mask: $FlowFixMe,
};

declare export class PinCode extends React.Component<PropsT, StateT> {
  static defaultProps: PinCodeDefaultProps;
}

declare export class StatefulPinCodeContainer
  extends React.Component<StatefulPinCodeContainerPropsT, StatefulPinCodeContainerStateT>
{
  static defaultProps: {
    initialState: $FlowFixMe,
    stateReducer: $FlowFixMe,
    onChange: $FlowFixMe,
  };
}

declare export var StatefulPinCode: {
  (props: StatefulPinCodePropsT): React.Node,
  defaultProps: PinCodeDefaultProps,
};
